apiVersion: project.openshift.io/v1
kind: Project
metadata:
  annotations:
    openshift.io/description: ""
    openshift.io/display-name: ""
    openshift.io/requester: system:admin
    openshift.io/sa.scc.mcs: s0:c26,c0
    openshift.io/sa.scc.supplemental-groups: 1000650000/10000
    openshift.io/sa.scc.uid-range: 1000650000/10000
  name: plr-curator
---
apiVersion: v1
data:
  .dockerconfigjson: $HARBOR_CFG
kind: Secret
metadata:
  name: harbor
  namespace: plr-curator
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
imagePullSecrets:
- name: harbor
kind: ServiceAccount
metadata:
  namespace: plr-curator
  name: plr-curator-account
secrets:  
- name: harbor  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
  name: plr-curator-clusterroles
rules:
  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [zalando.org]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
    
  # For watching namespaces cluster-wide
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]
    
  # For watching and creating Events cluster-wide
  - apiGroups: [""]
    resources: [events]
    verbs: [list, watch, create]    

  # For watching and deleting PLRS cluster-wide
  - apiGroups: [tekton.dev]
    resources: [pipelineruns, pipelineruns/status]
    verbs: [list, watch, delete, patch]
    
  # For watching PLRC objects cluster-wide
  - apiGroups: [nnlabs.net]
    resources: [plrcurators]
    verbs: [list, watch, delete, patch]    
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: plr-curator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: plr-curator-clusterroles
subjects:
  - kind: ServiceAccount
    name: plr-curator-account
    namespace: plr-curator
---
# Currator PLRC for the 'pipelines' project
apiVersion: nnlabs.net/v1
kind: PLRCurator
metadata:
  name: pipelines-curator
  namespace: plr-curator
spec:
  plrlimit: 3
  namespace: pipelines
  repoparam: git-repo-name  
---
# Deploy the operator from harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: plr-curator-kopf
    app.kubernetes.io/component: plr-curator-kopf
    app.kubernetes.io/instance: plr-curator-kopf
  name: plr-curator-kopf
  namespace: plr-curator
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: plr-curator-kopf
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        deployment: plr-curator-kopf
    spec:
      containers:
      - image: repo-harbor.apps.okd.nnlabs.net/techchallenge/plr-curator-kopf:latest
        imagePullPolicy: Always
        name: plr-curator-kopf
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: plr-curator-account
      serviceAccountName: plr-curator-account
      terminationGracePeriodSeconds: 30
